#! /usr/bin/env python3
# Each new term in the Fibonacci sequence is generated by adding the previous two
# terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

def fibonacci(n, knownValues={0:0, 1:1}):
    '''Finds the nth fibonacci number through recursion'''
    if (n < 0): 
        raise ValueError
    try:
        return knownValues[n]
    except KeyError:
        return fibonacci(n - 1) + fibonacci(n - 2)

def sumEvenFibonacci(upperLimit):
    '''Sums all even fibonacci numbers less than upperLimit. Note that every
    third element of the fibonacci sequence is even.'''
    returnSum = 0
    knownVals = {0:0, 1:1}
    for i in range(0, upperLimit):
        F = fibonacci(i, knownVals)
        knownVals[i] = F
        if (F > upperLimit):
            break
        if (F % 2 == 0):
            returnSum += F
    return returnSum

if __name__ == "__main__":
    print(sumEvenFibonacci(4000000))

